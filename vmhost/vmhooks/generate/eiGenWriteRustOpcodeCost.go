package vmhooksgenerate

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

const useStatements = `
use serde::{Deserialize, Serialize};
use std::fs;
use std::path::Path;

use crate::GasSchedule;

`

const configStruct = `
#[derive(Deserialize)]
struct Config {
    #[serde(rename = "WASMOpcodeCost")]
    wasm_opcode_cost: OpcodeCost,
}

`

const implBlock = `impl OpcodeCost {
    pub fn new(gas_schedule: GasSchedule) -> Self {
        let schedule_path = Path::new(env!("CARGO_MANIFEST_DIR"))
            .join("schedules")
            .join(gas_schedule.to_string());

        Self::from_file(schedule_path).unwrap()
    }

    pub fn from_file<P: AsRef<Path>>(path: P) -> Result<Self, std::io::Error> {
        let content = fs::read_to_string(path)?;
        Self::from_toml_str(&content)
            .map_err(|e| std::io::Error::new(std::io::ErrorKind::InvalidData, e.to_string()))
    }

    pub fn from_toml_str(content: &str) -> Result<Self, toml::de::Error> {
        let config: Config = toml::from_str(content)?;
        Ok(config.wasm_opcode_cost)
    }
}
`

// WriteRustOpcodeCost generates code for opcode_cost.rs
func WriteRustOpcodeCost(out *eiGenWriter) {
	out.WriteString(`// Code generated by vmhooks generator. DO NOT EDIT.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!! AUTO-GENERATED FILE !!!!!!!!!!!!!!!!!!!!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
`)
	out.WriteString(useStatements)
	out.WriteString("#[derive(Clone, Debug, Default, Deserialize, Serialize, PartialEq)]\n")
	out.WriteString("#[serde(default)]\n")
	out.WriteString("pub struct OpcodeCost {\n")

	readFile, err := os.Open("generate/cmd/input/wasmer2_opcodes_short.txt")
	if err != nil {
		panic(err)
	}
	defer readFile.Close()

	fileScanner := bufio.NewScanner(readFile)
	fileScanner.Split(bufio.ScanLines)

	for fileScanner.Scan() {
		line := fileScanner.Text()
		out.WriteString(fmt.Sprintf("    #[serde(rename = \"%s\", default)]\n", line))
		out.WriteString(fmt.Sprintf("    pub opcode_%s: u32,\n", strings.ToLower(line)))
	}
	out.WriteString("}\n")
	out.WriteString(configStruct)
	out.WriteString(implBlock)
}
